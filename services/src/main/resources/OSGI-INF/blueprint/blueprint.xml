<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
           xmlns:jaxrsclient="http://cxf.apache.org/blueprint/jaxrs-client"
           xmlns:cxf="http://cxf.apache.org/blueprint/core"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd
                http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd
                http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd
                http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.0.0.xsd">

    <cm:property-placeholder persistent-id="xit.camp.account" />

    <!-- RESTFul Web Services Configuration -->
    <!-- 1 -->
    <cxf:bus>
        <cxf:features>
            <cxf:logging/>
        </cxf:features>
    </cxf:bus>

    <!-- GSuiteService -->
    <bean id="gSuiteService" class="camp.xit.auth.services.google.impl.GSuiteDirectoryServiceImpl">
        <argument ref="directoryApiClient"/>
    </bean>
    
    <!-- Configuration listener -->
    <service id="gSuiteServiceConfigHandler" ref="gSuiteService" interface="org.osgi.service.event.EventHandler">
        <service-properties>
            <entry key="event.topics">
                <array value-type="java.lang.String">
                    <value>camp/xit/account/Configuration/*</value>
                </array>
            </entry>
        </service-properties>
    </service>
    
    <!-- JSON Provider -->
    <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
        <property name="dropRootElement" value="true"/> <!-- Serialization -->
        <property name="supportUnwrapped" value="true"/> <!-- Deserialization -->
    </bean>
    
    <jaxrsclient:client id="directoryApiClient" threadSafe="true" 
                        address="https://www.googleapis.com/admin/directory/v1"
                        serviceClass="org.apache.cxf.jaxrs.client.WebClient">
        <jaxrsclient:headers>
            <entry key="Accept" value="application/json"/>
            <entry key="Content-Type" value="application/json"/>
        </jaxrsclient:headers>
        <jaxrsclient:providers>
            <ref component-id="jsonProvider"/>
        </jaxrsclient:providers>
    </jaxrsclient:client>


    <!-- Google OAuth2 -->
    
    <!-- UserInfoService REST service  -->
    <jaxrs:server id="xitRestServer" address="/xit">
        <jaxrs:serviceBeans>
            <ref component-id="userAccountService"/>
            <ref component-id="userInfoService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref component-id="jsonProvider"/>
            <!-- Checks that a client is authenticated with Google -->
            <ref component-id="oidcRpFilter"/>
            <!-- JAX-RS provider that makes OidcClientTokenContext available as JAX-RS @Context -->
            <ref component-id="clientTokenContextProvider"/>
            <!-- GSuite Authorization filter -->
            <ref component-id="gsuiteAuthzFilter"/>
        </jaxrs:providers>
    </jaxrs:server> 
     
    <bean id="gsuiteAuthzFilter" class="camp.xit.auth.services.rest.GSuiteGroupAuthorizationFilter">
        <argument ref="gSuiteService"/>
        <argument value="${gsuite.domain}"/> 
    </bean>
     
    <!-- JAX-RS provider that makes OidcClientTokenContext available as JAX-RS @Context -->
    <bean id="clientTokenContextProvider" class="org.apache.cxf.rs.security.oauth2.client.ClientTokenContextProvider"/>
     
    <bean id="userAccountService" class="camp.xit.auth.services.rest.account.UserAccountService">
        <argument ref="gSuiteService"/>
        <argument ref="peopleServiceClient"/>
    </bean>

    <bean id="userInfoService" class="camp.xit.auth.services.rest.account.UserInfoService"/>

    <!-- Configuration listener -->
    <service id="userAccountConfigHandler" ref="userAccountService" interface="org.osgi.service.event.EventHandler">
        <service-properties>
            <entry key="event.topics">
                <array value-type="java.lang.String">
                    <value>camp/xit/account/Configuration/*</value>
                </array>
            </entry>
        </service-properties>
    </service>

    <bean id="oidcRpFilter" class="org.apache.cxf.rs.security.oidc.rp.OidcRpAuthenticationFilter">
        <!-- 
             This state manager is shared between this filter and the RP endpoint, 
             the RP endpoint sets an OIDC context on it and this filter checks the context is available 
        -->
        <property name="clientTokenContextManager" ref="stateManager"/>
         
        <!-- The address to redirect to if no OIDC context is available. If not set, returns HTTP error 401 -->
        <!--<property name="redirectUri" value="/error"/>-->
    </bean>
     
    <!-- 
       2. OIDC RP endpoint: authenticates a user by redirecting a user to Google, and redirects the user 
                            to the initial application form once the authentication is done
    -->                        
    <jaxrs:server id="oidcRpServer" address="/oidc">
        <jaxrs:serviceBeans>
            <ref component-id="oidcRpService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <!-- the filter which does the actual work for obtaining an OIDC context -->
            <ref component-id="rpOidcRequestFilter"/>
           
            <!-- JAX-RS provider that makes OidcClientTokenContext available as JAX-RS @Context -->
            <ref component-id="clientTokenContextProvider"/>
        </jaxrs:providers>
    </jaxrs:server>
     
    <bean id="oidcRpService" class="org.apache.cxf.rs.security.oidc.rp.OidcRpAuthenticationService">
        <!-- This state manager is shared between this RP endpoint and the oidcRpFilter which protects
        the application endpoint, the RP endpoint sets an OIDC context on it and the filter checks 
        the context is available -->
        <property name="clientTokenContextManager" ref="stateManager"/>
        <!-- Where to redirect to once the authentication is complete -->
        <property name="defaultLocation" value="/"/>
    </bean>
    <!-- The state manager shared between the RP and application endpoints -->
    <bean id="stateManager" class="org.apache.cxf.rs.security.oauth2.client.MemoryClientTokenContextManager"/>
     
    <!-- This filter redirect to Google Authorization service, exchanges an authorization code for access token,
         extracts OIDC IdToken, requests OIDC UserInfo and makes it all available as OidcCientTokenContext
    -->
    <bean id="rpOidcRequestFilter" class="org.apache.cxf.rs.security.oidc.rp.OidcClientCodeRequestFilter">
        <property name="clientCodeStateManager" ref="rpClientCodeStateManager"/>
        <property name="scopes" value="openid email profile"/>
        <property name="accessTokenServiceClient" ref="atServiceClient"/>
        <property name="idTokenReader" ref="idTokenReader"/>
        <property name="userInfoClient" ref="userInfoClient"/>
        <property name="consumer" ref="consumer"/>
        <property name="authorizationServiceUri" value="https://accounts.google.com/o/oauth2/auth"/>
        <property name="startUri" value="rp"/>
        <property name="completeUri" value="https://account.xit.camp/cxf/oidc/rp/complete"/> <!-- Have to use absolute URI -->
    </bean>
    <!-- This state manager creates an OAuth2 'state' parameter and saves it in the HTTP session -->
    <bean id="rpClientCodeStateManager" class="org.apache.cxf.rs.security.oauth2.client.MemoryClientCodeStateManager"/>
     
    <!-- WebClient for requesting an OAuth2 Access token.
    rpOidcRequestFilter uses it to exchange a code for a token --> 
     
    <jaxrsclient:client id="atServiceClient" threadSafe="true" 
                        address="https://accounts.google.com/o/oauth2/token"
                        serviceClass="org.apache.cxf.jaxrs.client.WebClient">
        <jaxrsclient:headers>
            <entry key="Accept" value="application/json"/>
        </jaxrsclient:headers>
        <jaxrsclient:providers>
            <bean class="org.apache.cxf.jaxrs.provider.FormEncodingProvider">
                <property name="expectedEncoded" value="true"/>
            </bean> 
        </jaxrsclient:providers>
    </jaxrsclient:client> 
     
    <bean id="idTokenReader" class="org.apache.cxf.rs.security.oidc.rp.IdTokenReader">
        <property name="jwkSetClient" ref="jwkSetClient"/> 
        <property name="issuerId" value="accounts.google.com"/>
        <property name="clockOffset" value="10"/>
    </bean>
    <bean id="userInfoClient" class="org.apache.cxf.rs.security.oidc.rp.UserInfoClient">
        <property name="userInfoServiceClient" ref="userInfoServiceClient"/>
    </bean>
     
    <!-- WebClient for requesting an OIDC IDP JWK Set 
    This client is used to get a JWK key required to validate OIDC IdToken returned with the OAuth2 access token -->
    <jaxrsclient:client id="jwkSetClient" threadSafe="true" 
                        address="https://www.googleapis.com/oauth2/v2/certs"
                        serviceClass="org.apache.cxf.jaxrs.client.WebClient">
        <jaxrsclient:headers>
            <entry key="Accept" value="application/json"/>
        </jaxrsclient:headers>
        <jaxrsclient:providers>
            <bean class="org.apache.cxf.rs.security.jose.jaxrs.JsonWebKeysProvider"/>
        </jaxrsclient:providers>
    </jaxrsclient:client>
     
    <!-- WebClient for requesting an OIDC UserInfo  
    This client is optional if the application is happy working with OIDC IDToken only -->
     
    <jaxrsclient:client id="userInfoServiceClient" threadSafe="true" 
                        address="https://www.googleapis.com/plus/v1/people/me/openIdConnect"
                        serviceClass="org.apache.cxf.jaxrs.client.WebClient">
        <jaxrsclient:headers>
            <entry key="Accept" value="application/json"/>
        </jaxrsclient:headers>
        <jaxrsclient:providers>
            <bean class="org.apache.cxf.jaxrs.provider.json.JsonMapObjectProvider"/>
        </jaxrsclient:providers>
    </jaxrsclient:client>

    <jaxrsclient:client id="peopleServiceClient" threadSafe="true" 
                        address="https://people.googleapis.com/v1/people/me"
                        serviceClass="org.apache.cxf.jaxrs.client.WebClient">
        <jaxrsclient:headers>
            <entry key="Accept" value="application/json"/>
        </jaxrsclient:headers>
        <jaxrsclient:providers>
            <bean class="org.apache.cxf.jaxrs.provider.json.JsonMapObjectProvider"/>
        </jaxrsclient:providers>
    </jaxrsclient:client>

    <!-- Client id and secret allocated in Google Developer Console -->
    <bean id="consumer" class="org.apache.cxf.rs.security.oauth2.client.Consumer">
        <property name="clientId" value="${oauth2.web.clientId}"/> 
        <property name="clientSecret" value="${oauth2.web.clientSecret}"/>
    </bean> 

    <!-- Configuration -->
    <reference id="eventAdmin" interface="org.osgi.service.event.EventAdmin"/>
   
    <bean id="configurationBean" class="camp.xit.auth.services.util.Configuration">
        <argument ref="eventAdmin"/>
    </bean>
    
    <service id="configurationService" 
             interface="org.osgi.service.cm.ManagedService" 
             ref="configurationBean" 
             depends-on="userAccountConfigHandler gSuiteServiceConfigHandler">
        <service-properties>
            <entry key="service.pid" value="xit.camp.account"/>
        </service-properties>
    </service>
</blueprint>
